---
title: "Speeding up with DuckDB"
server: shiny
format: dashboard
---

<https://www.appsilon.com/post/r-shiny-duckd?utm_source=social&utm_medium=linkedin&utm_campaign=blog&utm_term=damian-rodziewicz>

```{r}
#| context: setup

library(nycflights13)
library(duckdb)
library(ggplot2)
data(flights)

dbcon <- dbConnect(duckdb())
duckdb::duckdb_register(dbcon, "flights", flights)
#num_rows <- dbExecute(dbcon, "create table flights as select * FROM 'data/flights-10m.parquet'")
origin <- dbGetQuery(dbcon, "select distinct dest from flights")
```

# {.toolbar}

```{r}
sliderInput("distance", "Select Distance", min = 11, max=4962, value = 2000)
selectInput("origin", "Select Destination", choices=origin, selected=origin[1])
```

# Row

```{r}
plotOutput("flights_delay")
```


```{r}
#| context: server
# flights_filtered <- eventReactive(input$recalc, {
#   carr <- input$origin
#   distance <- input$distance
#   query <- glue::glue_sql("select * from flights WHERE distance < {distance} and origin = {carr}", .con = dbcon)
#   
#   print(query)
#   out_frame <- dbGetQuery(conn = dbcon, statement = query)
#   return(out_frame)
# })


flights_filtered <- reactive({
  carr <- input$origin
  distance <- input$distance
  query <- glue::glue_sql("select * from flights WHERE distance < {distance} and dest = {carr}", .con = dbcon)
  
  print(query)
  out_frame <- dbGetQuery(conn = dbcon, statement = query)
  return(out_frame)
})


#output$flights_table <- renderTable(
#  knitr::kable(flights_filtered())
  
#)
```


::: {.panel-fill layout="[ [1], [1] ]"}

```{ojs}
Plot.rect(transpose(selectedData), Plot.bin({fillOpacity: "count"}, {x: xcol, y: ycol, fill: "species"})).plot()
```

```{ojs}
import {SummaryTable} from "@observablehq/summary-table"

SummaryTable(transpose(selectedData))
```

:::

output$flights_delay <- renderPlot({
  
  ggplot(flights_filtered(), aes(x=carrier, y=arr_delay, color=carrier)) +
    geom_boxplot()
})

```