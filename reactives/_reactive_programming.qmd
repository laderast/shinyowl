---
title: "Demystifying Reactive Programming"
engine: knitr
format: html
---

## Direct Interaction

```{r}
#| standalone: true
library(shiny)
library(ggplot2)
library(palmerpenguins)
library(shiny)
library(reactlog)

reactlog_enable()

choices <- c("flipper_length_mm", "bill_length_mm", "body_mass_g")

ui <- page_sidebar(
  sidebar = sidebar(
    radioButtons("variable", "Select Variable to Color", 
                 choices=c("species", "island"), 
                 selected="island"),
    selectInput("x_plot", "Select X Variable", 
                choices = choices, selected=choices[1])),
  plotOutput("direct_plot")
)

server <- function(input, output, session){
  
  output$direct_plot <- renderPlot({
    ggplot(penguins, aes(x=.data[[input$x_plot]], y=bill_depth_mm,
      color=.data[[input$variable]])) +
      geom_point()
  })
  
}

shinyApp(ui, server)
```

## `reactive()` - the most general case

```{r}
library(shiny)
library(reactlog)

reactlog_enable()

library(palmerpenguins)
choices <- unique(penguins$species)

ui <- page_sidebar(
  sidebar = sidebar(
    open="always",
    radioButtons("radio", "Select Species", 
                 choices=choices, selected = "Gentoo")),
  plotOutput("species_plot")
)

server <- function(input, output){
  
  my_data <- reactive({ 
    penguins |> dplyr::filter(species == input$radio)
      }) 
  
  output$species_plot <- renderPlot({
    ggplot(my_data(), aes(x=bill_depth_mm, 
                          y=bill_length_mm, 
                          color=island)) +
      geom_point()
  })
}

shinyApp(ui, server)
```

## `isolate()`: don't use an input as a dependency

Use in a reactive to disconnect controls from recomputation. If `longSlider` changes, then don't recompute. If `latSlider` changes, recompute

```{r}
library(palmerpenguins)
library(reactlog)

reactlog_enable()
choices <- unique(penguins$species)
islands <- unique(penguins$island)

ui <- page_sidebar(
  sidebar = sidebar(
    open="always",
    radioButtons("radio", "Select Species", 
                 choices=choices, selected = "Gentoo"),
    selectInput("island", "Select Islands", 
                 choices=islands, selected="Biscoe")
  ),
  plotOutput("species_plot")
)

server <- function(input, output){
  
  my_data <- reactive({ 
    penguins |> dplyr::filter(species == input$radio) |>
      ## Use isolate() in this filter statement
      ## reactive won't update when input$island changes
      dplyr::filter(island %in% isolate(input$island))
      }) 
  
  output$species_plot <- renderPlot({
    ggplot(my_data(), aes(x=bill_depth_mm, 
                          y=bill_length_mm, 
                          color=island)) +
      geom_point()
      })
}

shinyApp(ui, server)
```

## `reactiveValues`

Use like a list to store values for multiple reactive expressions. Recompute when any reactive expression changes:

## `req()`

Use in a reactive to require an input value before any calculation. Don't compute at all unless `longSlider` is set.

```{r}
library(palmerpenguins)
choices <- unique(penguins$species)
islands <- unique(penguins$island)
library(reactlog)
library(ggplot2)
library(shiny)
library(bslib)
library(dplyr)

reactlog_enable()

ui <- page_sidebar(
  sidebar = sidebar(
    open="always",
    radioButtons("radio", "Select Species", choices=choices, selected = NULL),
    selectInput("island", "Select Islands", choices=islands,selected=NULL,multiple = TRUE)
  ),
  plotOutput("species_plot")
)

server <- function(input, output){
  
  my_data <- reactive({ 
    req(input$island)
    penguins |> dplyr::filter(species == input$radio) |>
      dplyr::filter(island %in% input$island)
    }) 
  
  output$species_plot <- renderPlot({
    ggplot(my_data(), aes(x=bill_depth_mm, 
                          y=bill_length_mm, 
                          color=island)) +
      geom_point()
    })
}

shinyApp(ui, server)

```

## `eventReactive()` is for specific events

```{r}
library(palmerpenguins)
library(reactlog)

reactlog_enable()
choices <- unique(penguins$species)

ui <- page_sidebar(
  sidebar = sidebar(
    open="always",
    radioButtons("radio", "Select Species", choices=choices, selected = "Gentoo"),
    actionButton("activate", "Click to Filter")
  ),
  plotOutput("species_plot")
)

server <- function(input, output){
  
  my_data <- eventReactive( input$activate,
    { penguins |> dplyr::filter(species == input$radio)}) 
  
  output$species_plot <- renderPlot({
    ggplot(my_data(), aes(x=bill_depth_mm, y=bill_length_mm, color=island)) +
      geom_point()
  })
}

shinyApp(ui, server)

```

## `reactive() |> bindEvent()`

Make a reactive only recalculate given a specific input event. A little easier to type than reformatting wiht `eventReactive()`. In fact, `reactiveEvent()` is literally defined as `bindEvent(reactive())`

```{r}
library(palmerpenguins)
choices <- unique(penguins$species)
library(reactlog)

reactlog_enable()

ui <- page_sidebar(
  sidebar = sidebar(
    open="always",
    radioButtons("radio", "Select Species", choices=choices, selected = "Gentoo"),
    actionButton("activate", "Click to Filter")
  ),
  plotOutput("species_plot")
)

server <- function(input, output){
  
  my_data <- reactive({ penguins |> dplyr::filter(species == input$radio)}) |> 
    bindEvent(input$activate)
  
  output$species_plot <- renderPlot({
    ggplot(my_data(), aes(x=bill_depth_mm, y=bill_length_mm, color=island)) +
      geom_point()
  })
}

shinyApp(ui, server)

```

## `observeEvent()` is for side effects

Use `observeEvent()` when you don't need to return a reactive; usually something like saving a file, or printing a file, or triggering a function that doesn't change your dashboard.

We'll see it will be helpful when we use `ExtendedTask()` to speed things up. 

Here we're using `observeEvent()` to trigger a message in the console, but it could be anything you want to happen in R.

```{r}
library(reactlog)

reactlog_enable()

ui <- fluidPage(
    actionButton("activate", "Click to Activate")
)

server <- function(input, output){
  
  observeEvent(input$activate, {
    print("Activated in the Console")
  })
  }

shinyApp(ui, server)

```

### `bslib::input_task_button()`

Useful with `ExtendedTask`. "Locks up" when pressed. Won't let you press again until your task is done.

```{r}
#| eval: false

library(shiny)
library(reactlog)

reactlog_enable()

ui <- page_sidebar(
  sidebar = sidebar(
    open = "always",
    input_task_button("resample", "Resample"),
  ),
  verbatimTextOutput("summary")
)

server <- function(input, output, session) {
  sample <- eventReactive(input$resample, ignoreNULL=FALSE, {
    Sys.sleep(2)  # Make this artificially slow
    rnorm(100)
  })

  output$summary <- renderPrint({
    summary(sample())
  })
}

shinyApp(ui, server)
```

# Optimizing Your App

## Optimizing

- Caching
- `ExtendedTask()`

# Setting Up ExtendedTask

- Spins a long running calculation into its own process
- Uses `futures::promise()`
- 

## `ExtendedTask`

Spin an operation off into its own process; makes users of shiny app have a more responsive experience.

## Full `ExtendedTask()` example

```{r}
library(shiny)
library(bslib)
library(future)
library(promises)
future::plan(multisession)

library(reactlog)
reactlog_enable()

ui <- page_fluid(
  p("The time is ", textOutput("current_time", inline=TRUE)),
  p("The Sum is ", textOutput("sum"), inline=TRUE),
  hr(),
  numericInput("x", "x", value = 1),
  numericInput("y", "y", value = 2),
  input_task_button("btn", "Add numbers")#,
  # textOutput("sum")
)

server <- function(input, output, session) {
  output$current_time <- renderText({
    invalidateLater(1000)
    format(Sys.time(), "%H:%M:%S %p")
  })

  sum_values <- ExtendedTask$new(function(x, y) {
    future_promise({
      Sys.sleep(3)
      x + y
    })
  }) |> bind_task_button("btn")

  observeEvent(input$btn, {
    sum_values$invoke(input$x, input$y)
  })

  output$sum <- renderText({
    sum_values$result()
  })
}

shinyApp(ui, server)
```

# Caching

## Caching in Shiny

Lets you save results as cached; can speed up perceived performance of an app

- `bindCache()` - use for `reactive()`s and plots


## `bindCache()`

Explicitly caches a reactive expression.




## `memoise()`

## Be careful with `observe()`

### `observe() |> bind_event()`

