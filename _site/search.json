[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "shinyowl: intermediate shiny",
    "section": "",
    "text": "This workshop aims to get you over the hill to faster, better looking, and dynamic Shiny Apps.\n\nDashboards with Quarto\nDemystifying Reactive Programming\nMaking it modular\n\n#| components: [editor, viewer]\n#| standalone: true\n#| viewerHeight: 800\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for random distribution app ----\n# Sidebar layout with input and output definitions ----\nui &lt;- page_sidebar(\n\n  # App title ----\n  title = \"Tabsets\",\n\n  # Sidebar panel for inputs ----\n  sidebar = sidebar(\n\n    # Input: Select the random distribution type ----\n    radioButtons(\n      \"dist\",\n      \"Distribution type:\",\n      c(\n        \"Normal\" = \"norm\",\n        \"Uniform\" = \"unif\",\n        \"Log-normal\" = \"lnorm\",\n        \"Exponential\" = \"exp\"\n      )\n    ),\n    # br() element to introduce extra vertical spacing ----\n    br(),\n    # Input: Slider for the number of observations to generate ----\n    sliderInput(\n      \"n\",\n      \"Number of observations:\",\n      value = 500,\n      min = 1,\n      max = 1000\n    )\n  ),\n\n  # Main panel for displaying outputs ----\n  # Output: A tabset that combines three panels ----\n  navset_card_underline(\n    # Panel with plot ----\n    nav_panel(\"Plot\", plotOutput(\"plot\")),\n\n    # Panel with summary ----\n    nav_panel(\"Summary\", verbatimTextOutput(\"summary\")),\n\n    # Panel with table ----\n    nav_panel(\"Table\", tableOutput(\"table\"))\n  )\n)\n\n# Define server logic for random distribution app ----\nserver &lt;- function(input, output) {\n\n  # Reactive expression to generate the requested distribution ----\n  # This is called whenever the inputs change. The output functions\n  # defined below then use the value computed from this expression\n  d &lt;- reactive({\n    dist &lt;- switch(\n      input$dist,\n      norm = rnorm,\n      unif = runif,\n      lnorm = rlnorm,\n      exp = rexp,\n      rnorm\n    )\n\n    dist(input$n)\n  })\n\n  # Generate a plot of the data ----\n  # Also uses the inputs to build the plot label. Note that the\n  # dependencies on the inputs and the data reactive expression are\n  # both tracked, and all expressions are called in the sequence\n  # implied by the dependency graph.\n  output$plot &lt;- renderPlot({\n    dist &lt;- input$dist\n    n &lt;- input$n\n\n    hist(\n      d(),\n      main = paste(\"r\", dist, \"(\", n, \")\", sep = \"\"),\n      col = \"#75AADB\",\n      border = \"white\"\n    )\n  })\n\n  # Generate a summary of the data ----\n  output$summary &lt;- renderPrint({\n    summary(d())\n  })\n\n  # Generate an HTML table view of the data ----\n  output$table &lt;- renderTable({\n    d()\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui, server)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]