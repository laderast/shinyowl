---
title: "Part 1: UI Layout and Customizing"
format: 
  revealjs:
    echo: true
#    theme: [default, ../slides.scss] # moon= teal bg  |  dark
    scrollable: true
    incremental: true
    slide-number: c/t # c/t | c | h/v | h.v
    code-line-numbers: true
    footer: "https;//bitly/shinyowl/layouts/"
---

## Learning Objectives

By the end of this session, you should be able to:

- **Layout** your shiny app using `{bslib}`
- **Style** your shiny app using `bslib::bs_themer()`
- **Style** your shiny app using `{thematic}`

## What are Shiny UIs?

- Underneath, it's HTML + JavaScript
- Built on a library called Bootstrap
- JavaScript gives us the power to update parts of the HTML dynamically

## Language of the Web
::::{.columns}
:::{.column}
### Shiny

```r
dept_choices <- c("Ancient Near Easter Art", "American")
selectInput(
  "dept",
  "Select Department",
  choices = dept_choices
)
```
:::
:::{.column}
### HTML

```html
<div class="form-group shiny-input-container">
  <label class="control-label" id="dept-label" for="dept">
    Select Department
  </label>
  <div>
    <select id="dept" class="form-control">
      <option value="Ancient Near Easter Art" selected>Ancient Near Easter Art</option>
      <option value="American">American</option>
    </select>
  </div>
</div>
```
:::
::::



# Layout Your Shiny App with `{bslib}`

## What is `{bslib}`?

- Short for **B**oot**s**trap**Lib**rary
- Code for layout as dashboards
- Allows for applying theming

```{r}
library(bslib)
library(bsicons)
library(shiny)
```

## Components of `{bslib}`

- card
- sidebars
- value boxes

## Layouts

- `layout_sidebar()`
- `layout_column_wrap()`
- `layout_columns()`

## Pages

- `page_sidebar()`/`sidebar()`
- `page_navbar()`/ `navbar()`
- `page_fillable()`/`layout_`


## Cards {auto-animate=true}

```{r}
#| eval: false
library(bslib)
ui <- page(
  card({
    plotOutput("penguins")
  })
)
```

- `runApp("layouts/app_card.R")`

##

![](img/card.png)

## `page_sidebar()` {auto-animate=true}

```{r}
#| eval: false
library(bslib)
ui <- page_sidebar(
  sidebar = sidebar(
    selectInput("var", "Select Island",
      choices,
      selected = choices[1]
    )
  ),
  card({
    plotOutput("penguins")
  })
)
```

- `runApp("layouts/app_sidebar.R")`

##

![](img/page_sidebar.png)

## `layout_column_wrap()` {auto-animate=true}

```{r}
#| eval: false
ui <- page_sidebar(
  sidebar = sidebar(
    selectInput("var", "Select Island", 
                choices, 
                selected = choices[1])
  ),
  card(
    layout_column_wrap(
      plotOutput("penguins"),
      plotOutput("penguins2")
    )
  )
)
```

- `runApp("layouts/app_layout_column.R")`

##

![](img/layout_column.png)

## Value Boxes

```{r}
#| echo: true
value_box(
  title = "I got",
  value = "99 problems",
  showcase = bs_icon("music-note-beamed"),
  p("bslib ain't one", bs_icon("emoji-smile")),
  p("hit me", bs_icon("suit-spade"))
)
```


## Dynamic Value Box

See `runApp("layouts/app_bslib_box_dynamic.R")`

## Laying out value boxes

```{r}
#| echo: false
vbs <- list(
  value_box(
    title = "1st value",
    value = "123",
    showcase = bs_icon("bar-chart"),
    theme = "purple",
    p("The 1st detail")
  ),
  value_box(
    title = "2nd value",
    value = "456",
    showcase = bs_icon("graph-up"),
    theme = "teal",
    p("The 2nd detail"),
    p("The 3rd detail")
  )
)
```

```{r}
page_fillable(
  layout_column_wrap(
    width = "250px",
    fill = FALSE,
    vbs[[1]], vbs[[2]]
  ),
  card(
    min_height = 200,
    plotly::plot_ly(x = rnorm(100))
  )
)
```

## Exercise

Modify the `value_box` code in `layouts/app_bslib_box_layout.R`. Try out the following:

- Different colors: check out [R-Gallery's Color Picker](https://r-graph-gallery.com/color-palette-finder)
- Different icons: check out [Bootstrap Icons](https://icons.getbootstrap.com/)
- Different content

If you like, paste it into the Cascadia-R slack channel.

```{r}
countdown::countdown(minutes = 5)
```


## navbars

```{r}
#| eval: false
#| code-line-numbers: "1|3-5|6|7-12"
ui <- page_navbar(
  title = "My App",
  nav_panel(title = "One", p("First page content.")),
  nav_panel(title = "Two", p("Second page content.")),
  nav_panel("Three", p("Third page content.")),
  nav_spacer(),
  nav_menu(
    title = "Links",
    align = "right",
    nav_item(link_shiny),
    nav_item(link_posit)
  )
)
```

- `runApp("layouts/app_navbar.R")`
- [Carson Sievert: Customizing Navbars using {bslib}](https://www.youtube.com/watch?v=VNbab8bro2c)

##

![](img/navbar.gif)

# Styling Your App

## Design/HTML is all about containers

```{r}
#| eval: false
#| code-line-numbers: "1,11|5,10"
<div class="form-group shiny-input-container">
  <label class="control-label" id="dept-label" for="dept">
    Select Department
  </label>
  <div>
    <select id="dept" class="form-control">
      <option value="Ancient Near Easter Art" selected>Ancient Near Easter Art</option>
      <option value="American">American</option>
    </select>
  </div>
</div>
```


## Cascading Style Sheets (CSS)

Set of **rules** that define how HTML content is **presented** in the browser

```html
selector {
  property1: value;
  property2: value;
}
```

<br>

* **selector** defines which elements on page to apply rule
* **property list** set properties of elements to specific values

## Customizing CSS in Shiny (1)

:::: {.columns}

::: {.column width="55%"}

```r
ui <- fluidPage(
  tags$head(
    tags$style(
      HTML("
      body {
        background-color: blue;
        color: white;
      }")
    )
  ),
  # application UI
  ...
)
```

:::

::: {.column width="45%"}

* `tags` originates from `{htmltools}`, but imported with `{shiny}`

:::

::::

# The good news: you don't have to learn CSS

## Style your App with `{bslib}` and `{thematic}`

- `bslib::bs_themer()` 
- `bslib::run_with_themer()`
- `thematic::thematic_theme()`


## Exercise

Try running the following code below and change the `bg` and `fg` variables, as well as `primary` and maybe even the font. Cut and paste your `bs_theme_update()` code into the Slack to share your creation.

```r
library(bslib)
run_with_themer("app_bs_themer.R")
```

```{r}
countdown::countdown(minutes = 5)
```

## Getting `bs_themer()` to work with Shiny Dashboards

```r
runApp("layouts/_quarto_dashboard_bslib.qmd")
```

# Boosting User Experience (UX)

## Accessibility

Prioritizing accessibility leads to better UX!

::: {.nonincremental}
* Keyboard navigation (without mouse)
* Visualization color palettes accounting for vision deficiencies
* Metadata for HTML tag attributes 
:::

## Guides with [`{cicerone}`](https://cicerone.john-coene.com/index.html)

> A convienent API to create guided tours of Shiny applications using `driver.js`

![](https://cicerone.john-coene.com/img/home-cicerone.gif)


## The `{cicerone}` Workflow

::: {.nonincremental}
1. Note the input IDs of elements for guide
2. Use the `Cicerone` R6 class and `step()` methods to define steps
3. Import dependencies by declaring `use_cicerone()` in app UI
4. Define triggers to start guide in app server
:::

## 

## Resources

- [Beautify with Bootstrap](https://unleash-shiny.rinterface.com/beautify-with-bootstraplib)
- [Shiny in Production: Design and UX](https://shinyprod.com/units/d1-03-design-ux.html)
- [Carson Sievert: Towards the Next Generation of UI](https://www.youtube.com/watch?v=avZ7TDTRnVo)