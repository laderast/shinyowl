[
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Part 3: Modules",
    "section": "",
    "text": "By the end of this session, you should be able to:\n\nUtilize pre-built Shiny modules in your apps\nBuild your own Shiny modules\nExplain the basics of module communication"
  },
  {
    "objectID": "modules/index.html#learning-objectives",
    "href": "modules/index.html#learning-objectives",
    "title": "Part 3: Modules",
    "section": "",
    "text": "By the end of this session, you should be able to:\n\nUtilize pre-built Shiny modules in your apps\nBuild your own Shiny modules\nExplain the basics of module communication"
  },
  {
    "objectID": "modules/index.html#slides",
    "href": "modules/index.html#slides",
    "title": "Part 3: Modules",
    "section": "Slides",
    "text": "Slides\n    View slides in full screen"
  },
  {
    "objectID": "layouts/index.html",
    "href": "layouts/index.html",
    "title": "Part 1: UI Layout and Customizing",
    "section": "",
    "text": "By the end of this session, you should be able to:\n\nLayout your shiny app using {bslib}\nStyle your shiny app using bslib::bs_themer()\nStyle your shiny app using {thematic}"
  },
  {
    "objectID": "layouts/index.html#learning-objectives",
    "href": "layouts/index.html#learning-objectives",
    "title": "Part 1: UI Layout and Customizing",
    "section": "",
    "text": "By the end of this session, you should be able to:\n\nLayout your shiny app using {bslib}\nStyle your shiny app using bslib::bs_themer()\nStyle your shiny app using {thematic}"
  },
  {
    "objectID": "layouts/index.html#slides",
    "href": "layouts/index.html#slides",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Slides",
    "text": "Slides\n    View slides in full screen"
  },
  {
    "objectID": "layouts/index.html#exercises",
    "href": "layouts/index.html#exercises",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\n\n\nExercise 2"
  },
  {
    "objectID": "reactives/index.html",
    "href": "reactives/index.html",
    "title": "Exploring Reactivity",
    "section": "",
    "text": "Slides\n  Download PDF File\n   \n    Unable to display PDF file. Download instead.\n  \n  \n\nExercise 1\nCompare the two apps with a partner. Look at the reactive graph. Are they any different?\nrunApp(\"reactives/app_reactive.R\")\nrunApp(\"reactives/app_isolate.R\")\n\n\nExercise 2\nCompare the two apps with a partner. Look at the reactive graph. Are they any different?\nrunApp(\"reactives/app_eventReactive.R\")\nrunApp(\"reactives/app_observeEvent.R\")\n\n\nExercise 3\nTry and understand this app using {reactlog}.\nrunApp(\"reactives/app_ExtendedTaskSingle.R\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intermediate shiny: drawing the owl",
    "section": "",
    "text": "{width = 400}"
  },
  {
    "objectID": "index.html#agenda-roughly",
    "href": "index.html#agenda-roughly",
    "title": "Intermediate shiny: drawing the owl",
    "section": "Agenda (roughly)",
    "text": "Agenda (roughly)\n\n\n\nSection\nBegin\nEnd\n\n\n\n\nWelcome/Get Started\n9:00\n9:10\n\n\nDashboards\n9:10\n9:55\n\n\nBreak\n9:55\n10\n\n\nReactivity\n10\n10:55\n\n\nBreak\n10:55\n11\n\n\nModules/Wrap-up\n11\n12"
  },
  {
    "objectID": "layouts/slides.html#learning-objectives",
    "href": "layouts/slides.html#learning-objectives",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nBy the end of this session, you should be able to:\n\nLayout your shiny app using {bslib}\nStyle your shiny app using bslib::bs_themer()\nStyle your shiny app using {thematic}"
  },
  {
    "objectID": "layouts/slides.html#what-are-shiny-uis",
    "href": "layouts/slides.html#what-are-shiny-uis",
    "title": "Part 1: UI Layout and Customizing",
    "section": "What are Shiny UIs?",
    "text": "What are Shiny UIs?\n\nUnderneath, it’s HTML + JavaScript\nBuilt on a library called Bootstrap\nJavaScript gives us the power to update parts of the HTML dynamically"
  },
  {
    "objectID": "layouts/slides.html#language-of-the-web",
    "href": "layouts/slides.html#language-of-the-web",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Language of the Web",
    "text": "Language of the Web\n\n\nShiny\ndept_choices &lt;- c(\"Ancient Near Easter Art\", \"American\")\nselectInput(\n  \"dept\",\n  \"Select Department\",\n  choices = dept_choices\n)\n\nHTML\n&lt;div class=\"form-group shiny-input-container\"&gt;\n  &lt;label class=\"control-label\" id=\"dept-label\" for=\"dept\"&gt;\n    Select Department\n  &lt;/label&gt;\n  &lt;div&gt;\n    &lt;select id=\"dept\" class=\"form-control\"&gt;\n      &lt;option value=\"Ancient Near Easter Art\" selected&gt;Ancient Near Easter Art&lt;/option&gt;\n      &lt;option value=\"American\"&gt;American&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;"
  },
  {
    "objectID": "layouts/slides.html#designhtml-is-all-about-containers",
    "href": "layouts/slides.html#designhtml-is-all-about-containers",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Design/HTML is all about containers",
    "text": "Design/HTML is all about containers\n\n&lt;div class=\"form-group shiny-input-container\"&gt;\n  &lt;label class=\"control-label\" id=\"dept-label\" for=\"dept\"&gt;\n    Select Department\n  &lt;/label&gt;\n  &lt;div&gt;\n    &lt;select id=\"dept\" class=\"form-control\"&gt;\n      &lt;option value=\"Ancient Near Easter Art\" selected&gt;Ancient Near Easter Art&lt;/option&gt;\n      &lt;option value=\"American\"&gt;American&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;"
  },
  {
    "objectID": "layouts/slides.html#what-is-bslib",
    "href": "layouts/slides.html#what-is-bslib",
    "title": "Part 1: UI Layout and Customizing",
    "section": "What is {bslib}?",
    "text": "What is {bslib}?\n\nShort for BootstrapLibrary\n\n\n\nlibrary(bslib)\nlibrary(bsicons)\nlibrary(shiny)"
  },
  {
    "objectID": "layouts/slides.html#components-of-bslib",
    "href": "layouts/slides.html#components-of-bslib",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Components of {bslib}",
    "text": "Components of {bslib}\n\ncard\nsidebars\nvalue boxes"
  },
  {
    "objectID": "layouts/slides.html#layouts-pages",
    "href": "layouts/slides.html#layouts-pages",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Layouts / Pages",
    "text": "Layouts / Pages\n\n\nLayouts\n\nlayout_sidebar()\nlayout_column_wrap()\nlayout_columns()\n\n\nPages\n\npage_sidebar()/sidebar()\npage_navbar()/navbarPage()\npage_fillable()/layout_"
  },
  {
    "objectID": "layouts/slides.html#cards",
    "href": "layouts/slides.html#cards",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Cards",
    "text": "Cards\n\nlibrary(bslib)\nui &lt;- page(\n  card({\n    plotOutput(\"penguins\")\n  })\n)"
  },
  {
    "objectID": "layouts/slides.html#page_sidebar",
    "href": "layouts/slides.html#page_sidebar",
    "title": "Part 1: UI Layout and Customizing",
    "section": "page_sidebar()",
    "text": "page_sidebar()\n\nlibrary(bslib)\nui &lt;- page_sidebar(\n  sidebar = sidebar(\n    selectInput(\"var\", \"Select Island\",\n      choices,\n      selected = choices[1]\n    )\n  ),\n  card({\n    plotOutput(\"penguins\")\n  })\n)"
  },
  {
    "objectID": "layouts/slides.html#layout_column_wrap",
    "href": "layouts/slides.html#layout_column_wrap",
    "title": "Part 1: UI Layout and Customizing",
    "section": "layout_column_wrap()",
    "text": "layout_column_wrap()\n\nui &lt;- page_sidebar(\n  sidebar = sidebar(\n    selectInput(\"var\", \"Select Island\", \n                choices, \n                selected = choices[1])\n  ),\n  card(\n    layout_column_wrap(\n      plotOutput(\"penguins\"),\n      plotOutput(\"penguins2\")\n    )\n  )\n)"
  },
  {
    "objectID": "layouts/slides.html#value-boxes",
    "href": "layouts/slides.html#value-boxes",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Value Boxes",
    "text": "Value Boxes\n\nvalue_box(\n  title = \"I got\",\n  value = \"99 problems\",\n  showcase = bs_icon(\"music-note-beamed\"),\n  p(\"bslib ain't one\", bs_icon(\"emoji-smile\")),\n  p(\"hit me\", bs_icon(\"suit-spade\"))\n)\n\n\n\n\n\n\n\n\nI got\n99 problems\n\nbslib ain't one\n\n\n\n\nhit me"
  },
  {
    "objectID": "layouts/slides.html#dynamic-value-box",
    "href": "layouts/slides.html#dynamic-value-box",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Dynamic Value Box",
    "text": "Dynamic Value Box\nSee runApp(\"layouts/app_bslib_box_dynamic.R\")"
  },
  {
    "objectID": "layouts/slides.html#laying-out-value-boxes",
    "href": "layouts/slides.html#laying-out-value-boxes",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Laying out value boxes",
    "text": "Laying out value boxes\n\npage_fillable(\n  layout_column_wrap(\n    width = \"250px\",\n    fill = FALSE,\n    vbs[[1]], vbs[[2]]\n  ),\n  card(\n    min_height = 200,\n    plotly::plot_ly(x = rnorm(100))\n  )\n)\n\n\n\n\n\n\n\n\n\n1st value\n123\nThe 1st detail\n\n\n\n\n\n\n\n\n\n\n\n\n2nd value\n456\nThe 2nd detail\nThe 3rd detail"
  },
  {
    "objectID": "layouts/slides.html#navbars",
    "href": "layouts/slides.html#navbars",
    "title": "Part 1: UI Layout and Customizing",
    "section": "navbars",
    "text": "navbars"
  },
  {
    "objectID": "layouts/slides.html#style-your-app-with-bslib-and-thematic",
    "href": "layouts/slides.html#style-your-app-with-bslib-and-thematic",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Style your App with {bslib} and {thematic}",
    "text": "Style your App with {bslib} and {thematic}\n\nbslib::bs_themer()\nbslib::run_with_themer()\nthematic::thematic_theme()"
  },
  {
    "objectID": "layouts/slides.html#exercise",
    "href": "layouts/slides.html#exercise",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Exercise",
    "text": "Exercise\nTry modifying the layouts/app_bslib_box_layout.R code to modify the value boxes. Try out a different icon, different colors.\n\ncountdown::countdown(minutes = 5)\n\n\n−+\n05:00"
  },
  {
    "objectID": "layouts/slides.html#accessibility",
    "href": "layouts/slides.html#accessibility",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Accessibility",
    "text": "Accessibility\nPrioritizing accessibility leads to better UX!\n\n\nKeyboard navigation (without mouse)\nVisualization color palettes accounting for vision deficiencies\nMetadata for HTML tag attributes"
  },
  {
    "objectID": "layouts/slides.html#guides-with-cicerone",
    "href": "layouts/slides.html#guides-with-cicerone",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Guides with {cicerone}",
    "text": "Guides with {cicerone}\n\nA convienent API to create guided tours of Shiny applications using driver.js"
  },
  {
    "objectID": "layouts/slides.html#the-cicerone-workflow",
    "href": "layouts/slides.html#the-cicerone-workflow",
    "title": "Part 1: UI Layout and Customizing",
    "section": "The {cicerone} Workflow",
    "text": "The {cicerone} Workflow\n\n\nNote the input IDs of elements for guide\nUse the Cicerone R6 class and step() methods to define steps\nImport dependencies by declaring use_cicerone() in app UI\nDefine triggers to start guide in app server"
  },
  {
    "objectID": "layouts/slides.html#section",
    "href": "layouts/slides.html#section",
    "title": "Part 1: UI Layout and Customizing",
    "section": "",
    "text": "Beautify with Bootstrap"
  },
  {
    "objectID": "layouts/slides.html#but-im-not-a-web-designer",
    "href": "layouts/slides.html#but-im-not-a-web-designer",
    "title": "Part 1: UI Layout and Customizing",
    "section": "But … I’m not a Web Designer?",
    "text": "But … I’m not a Web Designer?\n\n\nWealth of packages available in the Shiny ecosystem\nPlug-in favorite theme styles\nAbility to go as low-level as desired with CSS and JavaScript\n\n\n\nlibrary(countdown)\ncountdown(minutes = 5, seconds = 0)\n\n\n−+\n05:00"
  },
  {
    "objectID": "layouts/slides.html#language-of-the-web-1",
    "href": "layouts/slides.html#language-of-the-web-1",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Language of the Web",
    "text": "Language of the Web"
  },
  {
    "objectID": "layouts/slides.html#multiple-levels-of-abstraction",
    "href": "layouts/slides.html#multiple-levels-of-abstraction",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Multiple Levels of Abstraction",
    "text": "Multiple Levels of Abstraction\n\n\n\n{shiny}\nfluidRow()\n\n{htmltools}\ndiv(class=\"row\", ...)\n\nRaw HTML\n&lt;div class=\"row\"&gt;...&lt;/div&gt;\n\n\n\nEmpowers users across spectrum of design experience"
  },
  {
    "objectID": "layouts/slides.html#cascading-style-sheets-css",
    "href": "layouts/slides.html#cascading-style-sheets-css",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Cascading Style Sheets (CSS)",
    "text": "Cascading Style Sheets (CSS)\nSet of rules that define how HTML content is presented in the browser\n\nselector {\n  property1: value;\n  property2: value;\n}\n\n\nselector defines which elements on page to apply rule\nproperty list set properties of elements to specific values"
  },
  {
    "objectID": "layouts/slides.html#customizing-css-in-shiny-1",
    "href": "layouts/slides.html#customizing-css-in-shiny-1",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Customizing CSS in Shiny (1)",
    "text": "Customizing CSS in Shiny (1)\n\n\nui &lt;- fluidPage(\n  tags$head(\n    tags$style(\n      HTML(\"\n      body {\n        background-color: blue;\n        color: white;\n      }\")\n    )\n  ),\n  # application UI\n  ...\n)\n\n\ntags originates from {htmltools}, but imported with {shiny}"
  },
  {
    "objectID": "layouts/slides.html#customizing-css-in-shiny-2",
    "href": "layouts/slides.html#customizing-css-in-shiny-2",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Customizing CSS in Shiny (2)",
    "text": "Customizing CSS in Shiny (2)\n\n\n# app.R\n\nui &lt;- fluidPage(\n  tags$head(\n    tags$link(\n      rel = \"stylesheet\", \n      type = \"text/css\", \n      href = \"custom.css\"\n    )\n  )\n)\n\n/* www/custom.css */\n\nbody {\n  background-color: blue;\n  color: white;\n}"
  },
  {
    "objectID": "layouts/slides.html#customizing-css-in-shiny-3",
    "href": "layouts/slides.html#customizing-css-in-shiny-3",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Customizing CSS in Shiny (3)",
    "text": "Customizing CSS in Shiny (3)\nui &lt;- fluidPage(\n  h2(\n  \"Art Viewer Application\", \n  style = \"font-family: monospace;\"\n  ),\n  ...\n)"
  },
  {
    "objectID": "layouts/slides.html#your-turn-exercise-1",
    "href": "layouts/slides.html#your-turn-exercise-1",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Your Turn: Exercise 1",
    "text": "Your Turn: Exercise 1\nIn the application ex-1/app.R, give the image display a bit of style! Visit the exercise page for more details.\n\nlibrary(countdown)\ncountdown(minutes = 5, seconds = 0)\n\n\n−+\n05:00"
  },
  {
    "objectID": "layouts/slides.html#almost-endless-possibilities",
    "href": "layouts/slides.html#almost-endless-possibilities",
    "title": "Part 1: UI Layout and Customizing",
    "section": "(Almost) Endless Possibilities",
    "text": "(Almost) Endless Possibilities\n\n\nShiny UI powered by Bootstrap\nDefaults are clean and simple\nRevising the style for every element …"
  },
  {
    "objectID": "layouts/slides.html#enter-bslib",
    "href": "layouts/slides.html#enter-bslib",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Enter {bslib}",
    "text": "Enter {bslib}\n\nProvides tools for customizing Bootstrap themes directly in R\n\n\nEasy to explore theme options interactively\nLogical parameters to most common elements for color, font, and more\nBuilt upon the Sass stylesheet language to extend traditional CSS with modern features"
  },
  {
    "objectID": "layouts/slides.html#your-turn-exercise-2",
    "href": "layouts/slides.html#your-turn-exercise-2",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Your Turn: Exercise 2",
    "text": "Your Turn: Exercise 2\nBuilding upon the app from exercise 1, use {bslib} to customize font and other theme elements!\n\nlibrary(countdown)\ncountdown(minutes = 5, seconds = 0)\n\n\n−+\n05:00"
  },
  {
    "objectID": "layouts/slides.html#accessibility-1",
    "href": "layouts/slides.html#accessibility-1",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Accessibility",
    "text": "Accessibility\nPrioritizing accessibility leads to better UX!\n\n\nKeyboard navigation (without mouse)\nVisualization color palettes accounting for vision deficiencies\nMetadata for HTML tag attributes"
  },
  {
    "objectID": "layouts/slides.html#guides-with-cicerone-1",
    "href": "layouts/slides.html#guides-with-cicerone-1",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Guides with {cicerone}",
    "text": "Guides with {cicerone}\n\nA convienent API to create guided tours of Shiny applications using driver.js"
  },
  {
    "objectID": "layouts/slides.html#the-cicerone-workflow-1",
    "href": "layouts/slides.html#the-cicerone-workflow-1",
    "title": "Part 1: UI Layout and Customizing",
    "section": "The {cicerone} Workflow",
    "text": "The {cicerone} Workflow\n\n\nNote the input IDs of elements for guide\nUse the Cicerone R6 class and step() methods to define steps\nImport dependencies by declaring use_cicerone() in app UI\nDefine triggers to start guide in app server"
  },
  {
    "objectID": "layouts/slides.html#shinywidgets",
    "href": "layouts/slides.html#shinywidgets",
    "title": "Part 1: UI Layout and Customizing",
    "section": "{shinyWidgets}",
    "text": "{shinyWidgets}\n\nCustom widgets and other components to enhance your Shiny application\n\n\n\nAlternatives to many classic Shiny inputs wrapping specialized frameworks within Bootstrap, Material Design, and more\nFantastic demonstration app: shinyapps.dreamrs.fr/shinyWidgets"
  },
  {
    "objectID": "layouts/slides.html#the-shiny-ui-ecosystem",
    "href": "layouts/slides.html#the-shiny-ui-ecosystem",
    "title": "Part 1: UI Layout and Customizing",
    "section": "The Shiny UI Ecosystem",
    "text": "The Shiny UI Ecosystem\n\nbs4dash.rinterface.com"
  },
  {
    "objectID": "layouts/slides.html#choose-your-widget",
    "href": "layouts/slides.html#choose-your-widget",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Choose your Widget",
    "text": "Choose your Widget\n\n\n{shinydashboard}\n\n\n😀 Easy, right?\n\nlibrary(shiny)\nlibrary(shinydashboard)\nui &lt;- fluidPage(\n  h2(\"My Title\")\n  valueBox(4024, \"Total downloads\")\n)\n\n\n\n😐 Not quite: {shiny} and {shinydashboard} use different styling toolkits under the hood"
  },
  {
    "objectID": "layouts/slides.html#htmltools-to-the-rescue",
    "href": "layouts/slides.html#htmltools-to-the-rescue",
    "title": "Part 1: UI Layout and Customizing",
    "section": "💪 {htmltools} to the Rescue",
    "text": "💪 {htmltools} to the Rescue\n\nDefine WidgetApp Usage\n\n\nuseValueBox &lt;- function() {\n  if (!requireNamespace(package = \"shinydashboard\")) {\n    message(\"package 'shinydashboard' is required to run this function\")\n  }\n  \n  deps &lt;- htmltools::findDependencies(\n      shinydashboard::dashboardPage(\n        header = shinydashboard::dashboardHeader(),\n        sidebar = shinydashboard::dashboardSidebar(),\n        body = shinydashboard::dashboardBody()\n      )\n  )\n  htmltools::attachDependencies(tags$div(), value = deps)\n}\n\nvalue_box &lt;- function(...) shinydashboard::valueBox(...)\n\n\nlibrary(shiny)\nlibrary(shinydashboard)\n\nui &lt;- fluidPage(\n  useValueBox()\n  h2(\"My Title\")\n  value_box(4024, \"Total downloads\")\n)"
  },
  {
    "objectID": "layouts/slides.html#back-to-shinywidgets",
    "href": "layouts/slides.html#back-to-shinywidgets",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Back to {shinyWidgets}",
    "text": "Back to {shinyWidgets}\nUsage of this powerful technique in {shinyWidgets}:\n\n\nuseArgonDash()\nusebs4Dash()\nuseShinyDashboard()\nuseShinyDashboardPlus()\nuseTablerDash()"
  },
  {
    "objectID": "layouts/slides.html#not-just-styling",
    "href": "layouts/slides.html#not-just-styling",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Not Just Styling",
    "text": "Not Just Styling\nAll of Shiny’s interactivity is powered by JavaScript\n\n\nDirect pipe to & from R process to client (browser)\nNormal use: Everything set up for you\n\n\nFoundations in place to extend Shiny’s power when desired"
  },
  {
    "objectID": "layouts/slides.html#shinyjs",
    "href": "layouts/slides.html#shinyjs",
    "title": "Part 1: UI Layout and Customizing",
    "section": "{shinyjs}",
    "text": "{shinyjs}\n\nEasily improve the user experience of your Shiny apps in seconds, without having to know JS\n\n\n\nEnable & disable buttons\nShow & hide elements\nDynamically adding and removing CSS classes\nClick a shiny button from server side\nRun JS scripts easily if desired"
  },
  {
    "objectID": "layouts/slides.html#your-turn-exercise-3",
    "href": "layouts/slides.html#your-turn-exercise-3",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Your Turn: Exercise 3",
    "text": "Your Turn: Exercise 3\nHarness the power of custom JavaScript in the Art Viewer App!\n\nlibrary(countdown)\ncountdown(minutes = 10, seconds = 0)\n\n\n−+\n10:00\n\n\n\n\n\n\nhttps;//shinyowl.netlify.com/layouts/"
  },
  {
    "objectID": "modules/slides.html#you-have-linkedin-to-blame",
    "href": "modules/slides.html#you-have-linkedin-to-blame",
    "title": "Part 3: Shiny Modules",
    "section": "You have LinkedIn to Blame",
    "text": "You have LinkedIn to Blame"
  },
  {
    "objectID": "modules/slides.html#modules",
    "href": "modules/slides.html#modules",
    "title": "Part 3: Shiny Modules",
    "section": "Modules",
    "text": "Modules\n\n\n\n\nWhy?\nMotivating example\nHow to code"
  },
  {
    "objectID": "modules/slides.html#why",
    "href": "modules/slides.html#why",
    "title": "Part 3: Shiny Modules",
    "section": "Why?",
    "text": "Why?\n\n\nA new way to thinking about apps\nModularize code into smaller apps\nmakes it easier to develop with others\nmakes it easier to test code"
  },
  {
    "objectID": "modules/slides.html#use-shiny-modules-if",
    "href": "modules/slides.html#use-shiny-modules-if",
    "title": "Part 3: Shiny Modules",
    "section": "Use Shiny Modules if:",
    "text": "Use Shiny Modules if:\n\n\nYou want to reuse your code, especially in the same app\nYou are tired of thinking up unique ids for all the elements in your app (namespacing)\nYou need to break up a monolithic shiny application into pieces\n\nmultiple Shiny developers"
  },
  {
    "objectID": "modules/slides.html#maybe-not",
    "href": "modules/slides.html#maybe-not",
    "title": "Part 3: Shiny Modules",
    "section": "Maybe not:",
    "text": "Maybe not:\n\nYour app is a one and done - single version\nIt doesn’t have that many controls that need to be reused"
  },
  {
    "objectID": "modules/slides.html#motivating-example",
    "href": "modules/slides.html#motivating-example",
    "title": "Part 3: Shiny Modules",
    "section": "Motivating Example",
    "text": "Motivating Example\n\n\nAn ui that lets you pass in a dataset\nLets you select columns from that dataset\nWant multiple plots in the same app"
  },
  {
    "objectID": "modules/slides.html#using-shiny-modules",
    "href": "modules/slides.html#using-shiny-modules",
    "title": "Part 3: Shiny Modules",
    "section": "Using Shiny modules",
    "text": "Using Shiny modules\n\n\nui\n\nui &lt;- fluidPage(   \n    select_hist_ui(\n      id = \"mtcars_module\", \n      var_choices = mtcars_var_choices)\n    )\n\n\nnote that select_hist_ui() is a function that takes an id argument\nuses an id called mtcars_module"
  },
  {
    "objectID": "modules/slides.html#using-shiny-modules-1",
    "href": "modules/slides.html#using-shiny-modules-1",
    "title": "Part 3: Shiny Modules",
    "section": "Using Shiny modules",
    "text": "Using Shiny modules\n\n\nui\n\nui &lt;- fluidPage(   \n    select_hist_ui(\n      id = \"mtcars_module\", \n      var_choices = mtcars_var_choices)\n    )\n\n\nserver\n\nserver &lt;- function(input, output) {\n    select_hist_server(\n      id=\"mtcars_module\", \n      data=mtcars)\n}\n\n\nNote that we have a function select_hist_server()\nAlso uses the id \"mtcars_module\""
  },
  {
    "objectID": "modules/slides.html#try-it-out",
    "href": "modules/slides.html#try-it-out",
    "title": "Part 3: Shiny Modules",
    "section": "Try it out!",
    "text": "Try it out!\nrunApp(\"modules/module_demo_01/\")"
  },
  {
    "objectID": "modules/slides.html#reusing-code",
    "href": "modules/slides.html#reusing-code",
    "title": "Part 3: Shiny Modules",
    "section": "Reusing code",
    "text": "Reusing code\n\n\nui\n\nui &lt;- fluidPage(   \n    select_hist_ui(id = \"mtcars_module\", \n                   var_choices = mtcars_var_choices),\n    select_hist_ui(id = \"penguin_module\",\n                   var_choices = penguin_choices)\n    )\n\n\nnote we have two select_hist_ui() functions\nthe second one has the id of penguin_module"
  },
  {
    "objectID": "modules/slides.html#reusing-code-1",
    "href": "modules/slides.html#reusing-code-1",
    "title": "Part 3: Shiny Modules",
    "section": "Reusing code",
    "text": "Reusing code\n\n\nui\n\nui &lt;- fluidPage(   \n    select_hist_ui(id = \"mtcars_module\", \n                   var_choices = mtcars_var_choices),\n    select_hist_ui(id = \"penguin_module\",\n                   var_choices = penguin_choices)\n    )\n\n\nserver\n\nserver &lt;- function(input, output) {\n    select_hist_server(id=\"mtcars_module\", \n                       data=mtcars)\n    select_hist_server(id=\"penguin_module\", \n                       data=penguins)\n}\n\n\nNote that we have two instances of select_hist_server()\nThe second one use the id \"penguin_module\"\nWe can have two different plots/interfaces!"
  },
  {
    "objectID": "modules/slides.html#two-modules-two-datasets",
    "href": "modules/slides.html#two-modules-two-datasets",
    "title": "Part 3: Shiny Modules",
    "section": "Two modules, two datasets",
    "text": "Two modules, two datasets\n\n\n\ndataset is mtcars\n\n\n\n\ndataset is penguins"
  },
  {
    "objectID": "modules/slides.html#making-your-own-modules",
    "href": "modules/slides.html#making-your-own-modules",
    "title": "Part 3: Shiny Modules",
    "section": "Making Your Own Modules",
    "text": "Making Your Own Modules\n\nui module\nserver module\ndemo app"
  },
  {
    "objectID": "modules/slides.html#make-it-easy-on-yourself",
    "href": "modules/slides.html#make-it-easy-on-yourself",
    "title": "Part 3: Shiny Modules",
    "section": "Make it easy on yourself",
    "text": "Make it easy on yourself\n\nPut your code in a package (usethis::create_package())\nUse &lt;module_name&gt;_server and &lt;module_name&gt;_ui for your module names\nHave a demo app &lt;module_name&gt;_demo (makes it easier for testing)"
  },
  {
    "objectID": "modules/slides.html#ui-module",
    "href": "modules/slides.html#ui-module",
    "title": "Part 3: Shiny Modules",
    "section": "ui module",
    "text": "ui module\n\nselect_hist_ui &lt;- function(id, var_choices){\n  ns &lt;- NS(id)\n  tagList(\n    selectInput(inputId = ns(\"x_var\"), \n                label=\"Select X Variable\", \n                choices=var_choices, \n                selected = var_choices[1]),\n    plotOutput(ns(\"hist_plot\"))\n  )\n}\n\n\nInitialize the namespace for id using NS() function\nNeed to refer to any controls/plots with ids wrapped in ns()\n\nsuch as ns(\"x_var\") or ns(\"hist_plot\")"
  },
  {
    "objectID": "modules/slides.html#server-module",
    "href": "modules/slides.html#server-module",
    "title": "Part 3: Shiny Modules",
    "section": "Server Module",
    "text": "Server Module\n\nselect_hist_server &lt;- function(id, data) {\n  moduleServer(id, function(input, output, session) {\n\n  })\n  \n}\n\n\ndefine a function that takes an id as input\nmoduleServer() encapsulates your server code"
  },
  {
    "objectID": "modules/slides.html#server-module-1",
    "href": "modules/slides.html#server-module-1",
    "title": "Part 3: Shiny Modules",
    "section": "Server Module",
    "text": "Server Module\n\nselect_hist_server &lt;- function(id, data) {\n  moduleServer(id, function(input, output, session) {\n\n    output$hist_plot &lt;- \n      renderPlot({\n        x_var &lt;- input$x_var\n        data %&gt;% ggplot(aes(x=.data[[x_var]])) +\n          geom_histogram()\n    })\n    \n  })\n  \n}\n\n\nPut your server code in moduleServer()\nbe really careful with closing curly brackets and parentheses"
  },
  {
    "objectID": "modules/slides.html#write-a-demo-app-function",
    "href": "modules/slides.html#write-a-demo-app-function",
    "title": "Part 3: Shiny Modules",
    "section": "Write a demo app function",
    "text": "Write a demo app function\n\n## modules.R\nselect_hist_demo &lt;- function(data=mtcars){\n  var_choices &lt;- names(data)\n  ui &lt;- fluidPage(\n    select_hist_ui(id = \"module\", \n                   var_choices = var_choices)  \n  )\n  server &lt;- function(input,output,session){\n    select_hist_server(id=\"module\", data=data)\n  }\n  shinyApp(ui, server)\n}\n\n\nwrite an &lt;module_name&gt;_demo() function\nuseful for documentation and testing"
  },
  {
    "objectID": "modules/slides.html#exercise-use-a-shiny-module",
    "href": "modules/slides.html#exercise-use-a-shiny-module",
    "title": "Part 3: Shiny Modules",
    "section": "Exercise: Use a Shiny Module",
    "text": "Exercise: Use a Shiny Module\n\nIn RStudio, open up \"modules/module_demo_02/app.R\"\nWire in a new dataset to one of the plots"
  },
  {
    "objectID": "modules/slides.html#module-design-1",
    "href": "modules/slides.html#module-design-1",
    "title": "Part 3: Shiny Modules",
    "section": "Module Design",
    "text": "Module Design\n\n\nCareful design\n\n\nWhat does the module do?\nWhat is it trying to accomplish?\nWhat is the module’s name?\n\n\n\nInputs and Return Values\n\n\nStatic or Reactive Inputs?\nComplexity of return values\nWhich outputs serve as inputs for other modules?\n\n\n\n\nEric Nantz: Effective Use of Shiny modules in App development :::"
  },
  {
    "objectID": "modules/slides.html#communicating-between-modules",
    "href": "modules/slides.html#communicating-between-modules",
    "title": "Part 3: Shiny Modules",
    "section": "Communicating between modules",
    "text": "Communicating between modules\n\nmodules can return single objects or named lists\nAmes Housing App\n\n\n  # execute plot variable selection modules\n  plot1vars &lt;- varselect_mod_server(\"plot1_vars\") #returns a reactive\n  plot2vars &lt;- varselect_mod_server(\"plot2_vars\") #returns a reactive\n  \n  # execute scatterplot module\n  res &lt;- scatterplot_mod_server(\n                    \"plots\",\n                    dataset = ames,\n                    plot1vars = plot1vars,\n                    plot2vars = plot2vars)"
  },
  {
    "objectID": "modules/slides.html#scatterplot_mod_server",
    "href": "modules/slides.html#scatterplot_mod_server",
    "title": "Part 3: Shiny Modules",
    "section": "scatterplot_mod_server",
    "text": "scatterplot_mod_server\n\nscatterplot_mod_server &lt;- function(input, \n                                   output, \n                                   session, \n                                   dataset, \n                                   plot1vars, \n                                   plot2vars) {\n  \n  plot1_obj &lt;- reactive({\n    p &lt;- scatter_sales(dataset, xvar = plot1vars$xvar(), yvar = plot1vars$yvar())\n    return(p)\n  })\n  \n  plot2_obj &lt;- reactive({\n    p &lt;- scatter_sales(dataset, xvar = plot2vars$xvar(), yvar = plot2vars$yvar())\n    return(p)\n  })\n  \n  output$plot1 &lt;- renderPlot({\n    plot1_obj()\n  })"
  },
  {
    "objectID": "modules/slides.html#go-further",
    "href": "modules/slides.html#go-further",
    "title": "Part 3: Shiny Modules",
    "section": "Go Further",
    "text": "Go Further\n\nShiny Modules for Beginners - Emily Riederer\nEric Nantz: Effective Use of Shiny modules in App development\nMastering Shiny: Modules\n{rhino} - framework for developing apps from Appsilon"
  },
  {
    "objectID": "layouts/slides.html#section-1",
    "href": "layouts/slides.html#section-1",
    "title": "Part 1: UI Layout and Customizing",
    "section": "",
    "text": "Beautify with Bootstrap"
  },
  {
    "objectID": "layouts/slides.html#exercise-1",
    "href": "layouts/slides.html#exercise-1",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Exercise",
    "text": "Exercise\nTry running the following code below and change the bg and fg variables, as well as primary and maybe even the font. Cut and paste your bs_theme_update() code into the Slack to share your creation.\nlibrary(bslib)\nrun_with_themer(\"app_bs_themer.R\")\n\ncountdown::countdown(minutes = 5)\n\n\n−+\n05:00"
  },
  {
    "objectID": "layouts/slides.html#layouts",
    "href": "layouts/slides.html#layouts",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Layouts",
    "text": "Layouts\n\nlayout_sidebar()\nlayout_column_wrap()\nlayout_columns()"
  },
  {
    "objectID": "layouts/slides.html#pages",
    "href": "layouts/slides.html#pages",
    "title": "Part 1: UI Layout and Customizing",
    "section": "Pages",
    "text": "Pages\n\npage_sidebar()/sidebar()\npage_navbar()/navbarPage()\npage_fillable()/layout_"
  }
]